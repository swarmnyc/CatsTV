//
//  StyleKit.swift
//  CatGIFTV
//
//  Created by William Robinson on 3/3/17.
//  Copyright Â© 2017 SWARM. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawTVCat(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 101), resizing: ResizingBehavior = .aspectFit, number: CGFloat = 7) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 80, height: 101), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 80, y: resizedFrame.height / 101)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 80, resizedFrame.height / 101)


        //// Color Declarations
        let color = UIColor(red: 0.913, green: 0.913, blue: 0.913, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.7)
        shadow.shadowOffset = CGSize(width: 0, height: 0)
        shadow.shadowBlurRadius = 6

        //// Image Declarations
        let catIcon = #imageLiteral(resourceName: "TVCat")

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 21, width: 80, height: 80), cornerRadius: number)
        color.setFill()
        rectanglePath.fill()


        //// Picture Drawing
        let picturePath = UIBezierPath(rect: CGRect(x: 10, y: 31, width: 60, height: 60))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        context.saveGState()
        picturePath.addClip()
        catIcon.draw(in: CGRect(x: 10, y: 31, width: catIcon.size.width, height: catIcon.size.height))
        context.restoreGState()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Group 2
        //// Group
        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 37.34, y: 12.17)
        context.rotate(by: -25.69 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -2.14, y: -7.87, width: 4.29, height: 15.75), cornerRadius: number)
        color.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 42.84, y: 12.17)
        context.rotate(by: 25.69 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: -2.14, y: -7.87, width: 4.29, height: 15.75), cornerRadius: number)
        color.setFill()
        rectangle3Path.fill()

        context.restoreGState()




        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 29, y: 0, width: 10, height: 10))
        color.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 41, y: 0, width: 10, height: 10))
        color.setFill()
        oval2Path.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
